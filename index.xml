<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>akshara soman</title>
<link>https://www.aksharasoman.github.io/</link>
<atom:link href="https://www.aksharasoman.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>A machine learning blog</description>
<generator>quarto-1.5.56</generator>
<lastBuildDate>Thu, 15 Aug 2024 18:30:00 GMT</lastBuildDate>
<item>
  <title>Master Chatbot Development with DeepLearning.AI Courses</title>
  <dc:creator>Akshara Soman</dc:creator>
  <link>https://www.aksharasoman.github.io/posts/002_chatbot/in_chatbot_courses.html</link>
  <description><![CDATA[ 





<p>A chatbot project can help solidify your understanding of a few key AI concepts– and is fun to build! While there are numerous short courses available that focus on developing and using chatbot interfaces, this list will offer a solid starting point.</p>
<ol type="1">
<li><a href="https://www.deeplearning.ai/short-courses/chatgpt-prompt-engineering-for-developers/">ChatGPT Prompt Engineering for Developers</a> : 1 hr
<ol type="1">
<li>uses OpenAI API</li>
<li>best practices of prompt engineering (writing effective prompts)</li>
<li>show how LLM APIs can be used for a variety of tasks:
<ul>
<li>Summarizing (e.g., summarizing user reviews for brevity)</li>
<li>Inferring (e.g., sentiment classification, topic extraction)</li>
<li>Transforming text (e.g., translation, spelling &amp; grammar correction)</li>
<li>Expanding (e.g., automatically writing emails)</li>
</ul></li>
<li>Build a custom chatbot (a pizza bot with GUI) ChatGPT Prompt Engineering Course Notes</li>
</ol></li>
<li><a href="https://www.deeplearning.ai/short-courses/langchain-for-llm-application-development/">LangChain for LLM Application Development - DeepLearning.AI</a> : 1 hr : need to invest time to become adept at the langchain framework!
<ol type="1">
<li>to take your chatbot to next level by
<ol type="1">
<li>adding memory</li>
<li>as reasoning agents</li>
<li>Q&amp;A on proprietary documents</li>
</ol></li>
</ol></li>
<li><a href="https://www.deeplearning.ai/short-courses/building-systems-with-chatgpt/">Building Systems with the ChatGPT API - DeepLearning.AI</a> : 1 hr
<ol type="1">
<li>Build a A customer service chatbot</li>
<li>Multistage prompts: to split complex tasks into a pipeline of subtasks</li>
<li>Evaluate your LLM inputs and outputs for safety, accuracy, and relevance</li>
</ol></li>
</ol>



 ]]></description>
  <category>gen-ai</category>
  <category>chatbot</category>
  <category>LLM</category>
  <guid>https://www.aksharasoman.github.io/posts/002_chatbot/in_chatbot_courses.html</guid>
  <pubDate>Thu, 15 Aug 2024 18:30:00 GMT</pubDate>
  <media:content url="https://www.aksharasoman.github.io/posts/002_chatbot/deeplearningai.png" medium="image" type="image/png" height="101" width="144"/>
</item>
<item>
  <title>Key Aspects of Building a Chatbot</title>
  <dc:creator>Akshara Soman</dc:creator>
  <link>https://www.aksharasoman.github.io/posts/002_chatbot/in_keyaspects_chatbot.html</link>
  <description><![CDATA[ 





<p>Building an effective chatbot involves understanding various key aspects, including the training of Large Language Models(LLMs), incorporating memory, and production considerations.</p>
<section id="training" class="level4">
<h4 class="anchored" data-anchor-id="training">Training</h4>
<p>Language models (LLMs) undergo two main phases of training:</p>
<ol type="1">
<li><p><strong>Pre-training</strong>: In this phase, the model learns to predict the next word in a sentence using large-scale datasets. This helps the model acquire general understanding of language.</p></li>
<li><p><strong>Fine-tuning</strong>: This phase adapts the model to specific tasks. For chat models, the fine-tuning task is typically <strong>Conversational</strong>, where the model learns to engage in dialogues effectively.</p></li>
</ol>
</section>
<section id="memory" class="level4">
<h4 class="anchored" data-anchor-id="memory">Memory</h4>
<p>LLMs do not inherently possess memory, meaning they cannot remember previous interactions or conversations. Developers can incorporate memory features to maintain context throughout the interaction.</p>
<p>For more insights, see the <a href="https://www.deeplearning.ai/short-courses/langchain-for-llm-application-development/">LangChain course by deeplearning.ai</a>on developing chatbots.</p>
</section>
<section id="production" class="level4">
<h4 class="anchored" data-anchor-id="production">Production</h4>
<p>When deploying a chatbot to production, it’s essential to ensure that it provides safe and non-toxic responses.</p>
<p>For more details on setting up effective moderation practices, refer to the ‘Moderation’ chapter in the <a href="https://www.deeplearning.ai/short-courses/building-systems-with-chatgpt/">Building Systems with ChatGPT</a> course by deeplearning.ai.</p>
<p><strong>To learn more</strong> You can find more details about the contents of each course here: <a href="../../posts/002_chatbot/in_chatbot_courses.html">Master Chatbot Development with DeepLearning.AI Courses</a>.</p>


</section>

 ]]></description>
  <category>theory</category>
  <category>gen-ai</category>
  <category>chatbot</category>
  <category>LLM</category>
  <guid>https://www.aksharasoman.github.io/posts/002_chatbot/in_keyaspects_chatbot.html</guid>
  <pubDate>Thu, 15 Aug 2024 18:30:00 GMT</pubDate>
  <media:content url="https://www.aksharasoman.github.io/posts/002_chatbot/chatbot_benefits.jpeg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Chatbot for a Pizza Restaurant using free Gemini LLM API</title>
  <dc:creator>Akshara Soman</dc:creator>
  <link>https://www.aksharasoman.github.io/posts/002_chatbot/</link>
  <description><![CDATA[ 





<p>This project focuses on developing an order bot for a pizza restaurant using the <strong>Gemini 1.5 Flash LLM</strong>. Our goal was to create a chatbot that efficiently streamlines customer orders through a user-friendly GUI, which we built using the open-source Python library <strong>Panel</strong>. To implement this solution, we utilized the free tier of the Gemini API, ensuring cost-effectiveness while maintaining functionality.</p>
<p>A chatbot project can help solidify our understanding of a few <a href="../../posts/002_chatbot/in_keyaspects_chatbot.html">key Gen-AI concepts</a>– and is fun to build!</p>
<section id="major-implementation-aspects" class="level3">
<h3 class="anchored" data-anchor-id="major-implementation-aspects">Major Implementation Aspects</h3>
<section id="llm-api" class="level4">
<h4 class="anchored" data-anchor-id="llm-api">LLM API</h4>
<ul>
<li>The Gemini API key can be obtained <a href="https://aistudio.google.com/app/apikey">here</a>.</li>
<li>To get started with the Gemini API, refer to the <a href="https://ai.google.dev/gemini-api/docs/quickstart?lang=python">Gemini API Quickstart Guide</a>.</li>
<li>Gemini’s <a href="https://ai.google.dev/gemini-api/docs/text-generation?lang=python#chat">ChatSession</a> class supports multi-turn, freeform conversations, enabling dynamic interactions with the chatbot.</li>
</ul>
</section>
<section id="chat-gui" class="level4">
<h4 class="anchored" data-anchor-id="chat-gui">Chat GUI</h4>
<ul>
<li>The ‘<a href="https://panel.holoviz.org/reference/chat/ChatInterface.html">ChatInterface</a>’ component of <a href="https://panel.holoviz.org/index.html">Panel</a> library was used to build the chatbot’s graphical user interface (GUI).</li>
</ul>
</section>
</section>
<section id="problem-statement" class="level3">
<h3 class="anchored" data-anchor-id="problem-statement">Problem Statement</h3>
<p>Build a pizzeria chatbot to facilitate order taking using the Gemini 1.5 Flash model and design its GUI with the Panel library.</p>
</section>
<section id="tasks" class="level3">
<h3 class="anchored" data-anchor-id="tasks">Tasks</h3>
<ol type="1">
<li>Configuration: import necessary LLM libraries and <a href="https://aistudio.google.com/app/apikey">api key</a></li>
<li>Prompt Engineering: Prepare detailed system instructions to steer the behavior of the LLM model.</li>
<li>Developing a Function for Interactions: Create a function that receives prompts, passes them to the LLM, and returns the response while ensuring that the chat context is preserved. This can be achieved using the <a href="https://ai.google.dev/gemini-api/docs/text-generation?lang=python#chat">ChatSession</a> class of the Gemini API.</li>
<li>Building the GUI: Use the <a href="https://panel.holoviz.org/reference/chat/ChatInterface.html">ChatInterface</a> component from Panel to build the chatbot’s graphical interface.</li>
<li>App Deployment: Deploy the application both locally and on a web server.</li>
</ol>
<p>More information on each project task can be found in the <a href="../../posts/002_chatbot/v2_gemini-pizza-chatbot_chatInterface.html">jupyter notebook preview</a>.</p>
</section>
<section id="code" class="level3">
<h3 class="anchored" data-anchor-id="code">Code</h3>
<p>Github Repository: <a href="https://github.com/aksharasoman/chatbot/blob/e83575d5c1c3d7da3cd2c669fb68f5e1cf65238e/chatgpt-chatbot_dlai.ipynb">link</a></p>
</section>
<section id="chatbot-in-action" class="level3">
<h3 class="anchored" data-anchor-id="chatbot-in-action">Chatbot in Action</h3>
<p>Here is a video demonstrating our orderbot in action: </p><div class="quarto-video"><video id="video_shortcode_videojs_video1" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="orderbot_screenrecording.mov"></video></div><p></p>
<p>I deployed the chatbot using Ploomber, however the <a href="https://broken-wildflower-4698.ploomberapp.io/app">link</a> may currently be unavailable due to limitations of the free tier.</p>
</section>
<section id="key-takeaways" class="level3">
<h3 class="anchored" data-anchor-id="key-takeaways">Key Takeaways</h3>
<ul>
<li><p><strong>Importance of Prompt Engineering</strong>: Providing detailed and clear instructions significantly improves the performance of LLM models. For example, explicit instructions helped the Gemini model perform comparably to the OpenAI model by reducing errors in mathematical calculations.</p></li>
<li><p><strong>Performance Comparison</strong>: A comparison between the paid OpenAI model, “gpt-3.5-turbo” (code available <a href="https://github.com/aksharasoman/chatbot/blob/e83575d5c1c3d7da3cd2c669fb68f5e1cf65238e/chatgpt-chatbot_dlai.ipynb">here</a>), and the free-tier Gemini model, “gemini-1.5-flash,” showed that the OpenAI model generally delivered clearer and more accurate responses. However, the Gemini model’s performance improved with more detailed instructions.</p></li>
<li><p><strong>Tailor-Made Chat Interfaces:</strong> We used Panel in our project to build a customizable chat interface. Additionally, other packages and libraries, such as Streamlit and Flask, are also available for creating chat interfaces.</p></li>
<li><p><strong>Deployment Options and Costs</strong>: Different <a href="https://panel.holoviz.org/how_to/deployment/index.html">deployment services</a>, such as Amazon AWS, Google App Engine, Ploomber, and Hugging Face, come with varying costs, which should be considered when choosing a platform.</p></li>
</ul>
</section>
<section id="challenges-encountered" class="level3">
<h3 class="anchored" data-anchor-id="challenges-encountered">Challenges Encountered</h3>
<ol type="1">
<li><p><strong>Cost of OpenAI API</strong>: As the OpenAI API is no longer available for free, we opted for the Gemini LLM API. However, the transition presented its own set of challenges, such as requiring more detailed instructions and inconsistent performance in some tasks.</p></li>
<li><p><strong>Inconsistent Mathematical Calculations</strong>: When asked to re-check a calculation, the model may produce a different total than previously stated.</p>
<ul>
<li><strong>Solution</strong>: To ensure accuracy, explicitly instruct the model to calculate the sum of all ordered items’ prices when computing the customer’s total bill.</li>
</ul></li>
<li><p><strong>Need for Extensive Instructions</strong>: The Gemini model required more detailed instructions compared to the OpenAI API. For example:</p>
<ul>
<li>Instruct the chatbot to calculate the total bill by summing up the prices of all ordered items.</li>
<li>Instruct the chatbot not to suggest dishes not listed in the provided menu.</li>
</ul></li>
<li><p><strong>Missed Prompts for Toppings</strong>: Despite instructions to always inquire about toppings after a pizza order is placed, the chatbot occasionally fails to do so.</p></li>
<li><p><strong>Warning Message from Gemini Model</strong>: A warning message appeared when adding a system instruction during model initialization.</p>
<ul>
<li><strong>Solution</strong>: The warning was resolved by installing the package grpcio==1.60.1.</li>
</ul></li>
</ol>
</section>
<section id="additional-information" class="level3">
<h3 class="anchored" data-anchor-id="additional-information">Additional Information</h3>
<ul>
<li><a href="../../posts/002_chatbot/in_keyaspects_chatbot.html">Key Aspects of Building a Chatbot</a></li>
<li><a href="../../posts/002_chatbot/in_chatbot_courses.html">Master Chatbot Development with DeepLearning.AI Courses</a></li>
</ul>
<section id="how-to-deploy-a-panel-based-app" class="level4">
<h4 class="anchored" data-anchor-id="how-to-deploy-a-panel-based-app">How to deploy a Panel based app?</h4>
<ol type="1">
<li>Deploy an App built using Panel using Ploomber</li>
<li>Another option: <a href="https://towardsdatascience.com/deploy-a-python-visualization-panel-app-to-google-cloud-ii-416e487b44eb">Deploy a Python Visualization Panel App to Google Cloud Run</a> - didn’t do it because of the cost involved. It can be deployed only for a limited duration of time. Pizzabot deployed:<a href="https://broken-wildflower-4698.ploomberapp.io/app">Order bot of Pizza Paradise!</a></li>
</ol>
</section>
</section>
<section id="extensions---ideas" class="level3">
<h3 class="anchored" data-anchor-id="extensions---ideas">Extensions - Ideas</h3>
<ol type="1">
<li>Add memory to the bot
<ul>
<li>Use case: Save customers orders so that we can retrieve it if the customer asks.</li>
</ul></li>
<li>Create book-suggestion-bot based on reader’s reading history, genres of interest, and current best-sellers.</li>
</ol>
<p>If you have suggestions or ideas to collaborate, please drop an <a href="mailto:aksharasoman@gmail.com">email</a>.</p>


</section>

 ]]></description>
  <category>project</category>
  <category>gen-ai</category>
  <category>chatbot</category>
  <category>LLM</category>
  <guid>https://www.aksharasoman.github.io/posts/002_chatbot/</guid>
  <pubDate>Wed, 14 Aug 2024 18:30:00 GMT</pubDate>
  <media:content url="https://www.aksharasoman.github.io/posts/002_chatbot/chatbot.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Coding Practice - Solution to Leetcode Problems</title>
  <dc:creator>Akshara Soman</dc:creator>
  <link>https://www.aksharasoman.github.io/posts/coding-practice/</link>
  <description><![CDATA[ 





<section id="leetcode-solutions" class="level1">
<h1>Leetcode Solutions</h1>
<p>This is a collection of solutions_(in progress)_ to common Leetcode questions, based on a list compiled by <a href="https://neetcode.io/practice">Neetcode</a>.</p>
<p>The solutions are in Python3. Required explanations are provided as comments within the script file. If more detailed explanations are necessary, they will be included in an accompanying markdown file.</p>
<ul>
<li>You can find the list of questions that are covered in this repo <a href="../../posts/coding-practice/questions_list.html">here</a></li>
</ul>
<p>I recommend the following line-of-action if you are attempting a problem for the <em>FIRST time</em>:</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://www.aksharasoman.github.io/posts/coding-practice/images/neetcode-sop.png" class="img-fluid figure-img"></p>
<figcaption>neetcode-sop</figcaption>
</figure>
</div>
<section id="issues" class="level2">
<h2 class="anchored" data-anchor-id="issues">Issues</h2>
<p>If you face any issues or have any suggestions, please feel free to open an issue in the github repo. I will try to get back to you as soon as possible.</p>
</section>
<section id="more-questions" class="level2">
<h2 class="anchored" data-anchor-id="more-questions">More questions?</h2>
<p>If you want to contact me, you can reach me via <a href="mailto:aksharasoman@gmail.com">email</a> or visit <a href="https://aksharasoman.github.io">my website</a>.</p>


</section>
</section>

 ]]></description>
  <category>coding</category>
  <guid>https://www.aksharasoman.github.io/posts/coding-practice/</guid>
  <pubDate>Mon, 05 Aug 2024 18:30:00 GMT</pubDate>
  <media:content url="https://www.aksharasoman.github.io/posts/coding-practice/images/coding.jpg" medium="image" type="image/jpeg"/>
</item>
<item>
  <title>Generate Handwritten Digits Using GAN</title>
  <dc:creator>Akshara Soman</dc:creator>
  <link>https://www.aksharasoman.github.io/posts/001_gan_project/</link>
  <description><![CDATA[ 





<section id="objective-of-the-project" class="level3">
<h3 class="anchored" data-anchor-id="objective-of-the-project">Objective of the Project</h3>
<p>Build a DC-GAN (Deep Convolutional Generative Adversarial Network) to generate images of handwritten digits.</p>
</section>
<section id="important-details" class="level3">
<h3 class="anchored" data-anchor-id="important-details">Important Details</h3>
<ol type="1">
<li>Dataset: MNIST handwritten digits dataset (grayscale)</li>
<li>Model: Generative Adversarial Network (GAN)</li>
<li>Code available at: <a href="https://github.com/aksharasoman/dcgan" class="uri">https://github.com/aksharasoman/dcgan</a></li>
<li>It can be built in google colab: <a href="https://github.com/aksharasoman/dcgan/blob/f245b0250f79fcba497506f58dd080faeceade71/GAN_handwrittenDigits.ipynb">python-notebook</a></li>
</ol>
</section>
<section id="overview" class="level3">
<h3 class="anchored" data-anchor-id="overview">Overview</h3>
<p>A Generative Adversarial Network (GAN) model has two major components: a generator and a discriminator. Figure&nbsp;1 gives outline of a GAN model.</p>
<div id="fig-gan-arch" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-gan-arch-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://www.aksharasoman.github.io/posts/001_gan_project/gan_arch.png" class="img-fluid figure-img" style="width:60.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-gan-arch-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Basic GAN architecture
</figcaption>
</figure>
</div>
<p>A generator creates fake samples that mimic the real samples provided to the discriminator network. The discriminator is a binary classifier that evaluates these inputs, determining whether each one is real or fake. The generator’s objective is to produce fake samples that are so similar to real ones that the discriminator incorrectly identifies them as genuine.</p>
<p>GAN loss function consists of two parts: generator loss and discriminator loss.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
GAN Training Strategy
</div>
</div>
<div class="callout-body-container callout-body">
<p>During generator training, the discriminator’s weights are kept constant and are not updated, and vice versa.</p>
</div>
</div>
</section>
<section id="implementation" class="level3">
<h3 class="anchored" data-anchor-id="implementation">Implementation</h3>
<p>This project can be divided into 7 tasks.</p>
<ol type="1">
<li>Configurations</li>
<li>Load dataset</li>
<li>Load dataset into batches</li>
<li>Create discriminator network</li>
<li>Create generator network</li>
<li>Create loss function &amp; optimizer</li>
<li>Training Loop</li>
</ol>
<p>For ease of understanding, you may refer to the <a href="https://github.com/aksharasoman/dcgan/blob/f245b0250f79fcba497506f58dd080faeceade71/GAN_handwrittenDigits.ipynb">iPython notebook</a>, where each task is coded in separate sections.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Expected learnings
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li>What is Generative Adversarial Network</li>
<li>Applications (Current state-of-art performers for these applications)</li>
<li>What is Generator?</li>
<li>What is discriminator?</li>
<li>Understanding architecture</li>
<li>Loss functions</li>
<li>How to generate a fake image using GAN?</li>
<li>How to download and transform data in Pytorch?</li>
<li>How to calculate input image size for each layer?</li>
<li>How to build a GAN model from scratch in pytorch?</li>
<li>How to train a Generative Adversarial Network?
<ol type="1">
<li>How to train the model on colab with GPU?</li>
<li>How to train the model in a remote cluster environment?</li>
</ol></li>
<li>Challenges in GAN</li>
</ol>
</div>
</div>
</div>
</section>
<section id="results-snapshot" class="level3">
<h3 class="anchored" data-anchor-id="results-snapshot">Results Snapshot</h3>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="generated_digits_epoch1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Digits generated after the first epoch"><img src="https://www.aksharasoman.github.io/posts/001_gan_project/generated_digits_epoch1.png" class="img-fluid quarto-figure quarto-figure-left figure-img" alt="Digits generated after the first epoch"></a></p>
</figure>
</div>
<figcaption>Digits generated after the first epoch</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="generated_digits_epoch15.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Digits generated after 15 epochs"><img src="https://www.aksharasoman.github.io/posts/001_gan_project/generated_digits_epoch15.png" class="img-fluid quarto-figure quarto-figure-left figure-img" alt="Digits generated after 15 epochs"></a></p>
</figure>
</div>
<figcaption>Digits generated after 15 epochs</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="references" class="level3">
<h3 class="anchored" data-anchor-id="references">References</h3>
<ol type="1">
<li>Coursera Guided Project: “<a href="https://www.coursera.org/projects/deep-learning-with-pytorch-generative-adversarial-network#details">Deep Learning with PyTorch : Generative Adversarial Network</a>”</li>
</ol>


</section>

 ]]></description>
  <category>project</category>
  <category>gen-ai</category>
  <category>GAN</category>
  <category>pytorch</category>
  <guid>https://www.aksharasoman.github.io/posts/001_gan_project/</guid>
  <pubDate>Thu, 11 Jul 2024 18:30:00 GMT</pubDate>
  <media:content url="https://www.aksharasoman.github.io/posts/001_gan_project/gan_arch.png" medium="image" type="image/png" height="83" width="144"/>
</item>
<item>
  <title>Jupyter Notebook - Building an Orderbot using Gemini API</title>
  <link>https://www.aksharasoman.github.io/posts/002_chatbot/v2_gemini-pizza-chatbot_chatInterface.html</link>
  <description><![CDATA[ 





<section id="building-a-chatbot-using-gemini-api" class="level1">
<h1>Building a Chatbot using Gemini API</h1>
<section id="task-0-configure-api-key" class="level4">
<h4 class="anchored" data-anchor-id="task-0-configure-api-key">Task 0: Configure API key</h4>
<p>The Python SDK for the <a href="https://aistudio.google.com/app/apikey">Gemini API</a> is contained in the google-generativeai package.</p>
<p>Install dependency using: <code>pip install -q -U google-generativeai</code></p>
<p>Do not check an API key into your version control system.</p>
</section>
<section id="task-1-initialize-the-model" class="level4">
<h4 class="anchored" data-anchor-id="task-1-initialize-the-model">Task 1: Initialize the model</h4>
<div id="cell-4" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> google.generativeai <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> genai</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'gemini_api_key.txt'</span>,<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># rename file to 'llm_api_key.txt'</span></span>
<span id="cb1-4">    API_KEY <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read()</span>
<span id="cb1-5">genai.configure(api_key<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>API_KEY)</span></code></pre></div>
</div>
<p>Use system instructions to steer the behavior of the model</p>
<div id="cell-6" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Using a context manager to open the file</span></span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'pizzabot_system_instruction.txt'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'r'</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>:</span>
<span id="cb2-3">    sys_instr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.read()</span></code></pre></div>
</div>
<div id="cell-7" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>genai.GenerativeModel(</span>
<span id="cb3-2">  model_name<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"gemini-1.5-flash"</span>,</span>
<span id="cb3-3">  system_instruction<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>sys_instr)</span>
<span id="cb3-4"></span>
<span id="cb3-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">##### 2.1 Initialize the chat</span></span>
<span id="cb3-6">chat <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model.start_chat(history<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[])</span></code></pre></div>
</div>
</section>
<section id="task-2-receive-prompts-and-save-context-and-generate-chat-responses" class="level4">
<h4 class="anchored" data-anchor-id="task-2-receive-prompts-and-save-context-and-generate-chat-responses">Task 2: Receive Prompts and Save Context and Generate chat responses</h4>
<p><strong>ChatSession</strong> class of gemini enables us to have freeform conversation over multiple turns. We dont have to store conversation history as a list.</p>
<p>Example: <a href="https://ai.google.dev/gemini-api/docs/text-generation?lang=python#chat">Build an interactive chat</a></p>
<p>The <strong>ChatSession.send_message</strong> method returns the same <em>GenerateContentResponse</em> type as <strong>GenerativeModel.generate_content</strong>. It also appends your message and the response to the chat history</p>
<div id="cell-10" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> panel <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pn</span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> run_chat(value,user,instance):</span>
<span id="cb4-3">    response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chat.send_message(value)</span>
<span id="cb4-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># return f"{response.text}"</span></span>
<span id="cb4-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pn.chat.ChatMessage(response.text, user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Pizza Bot"</span>, avatar<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"🐼"</span>)</span></code></pre></div>
</div>
</section>
<section id="task-3-build-gui" class="level4">
<h4 class="anchored" data-anchor-id="task-3-build-gui">Task 3: Build GUI</h4>
<p>Help: <a href="https://panel.holoviz.org/tutorials/basic/build_chatbot.html">doc</a></p>
<div id="cell-13" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">pn.extension(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"perspective"</span>)<span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#initialization</span></span>
<span id="cb5-2"></span>
<span id="cb5-3">chat_bot <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pn.chat.ChatInterface(help_text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Welcome to Pizza Paradise! What would like to order?"</span>,callback<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>run_chat,</span>
<span id="cb5-4">                                 max_height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,max_width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>,show_rerun<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,show_clear<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb5-5">                                 )</span></code></pre></div>
<div class="cell-output cell-output-display">
<script type="application/javascript">
(function(root) {
  function now() {
    return new Date();
  }

  var force = true;
  var py_version = '3.4.3'.replace('rc', '-rc.').replace('.dev', '-dev.');
  var reloading = false;
  var Bokeh = root.Bokeh;

  if (typeof (root._bokeh_timeout) === "undefined" || force) {
    root._bokeh_timeout = Date.now() + 5000;
    root._bokeh_failed_load = false;
  }

  function run_callbacks() {
    try {
      root._bokeh_onload_callbacks.forEach(function(callback) {
        if (callback != null)
          callback();
      });
    } finally {
      delete root._bokeh_onload_callbacks;
    }
    console.debug("Bokeh: all callbacks have finished");
  }

  function load_libs(css_urls, js_urls, js_modules, js_exports, callback) {
    if (css_urls == null) css_urls = [];
    if (js_urls == null) js_urls = [];
    if (js_modules == null) js_modules = [];
    if (js_exports == null) js_exports = {};

    root._bokeh_onload_callbacks.push(callback);

    if (root._bokeh_is_loading > 0) {
      console.debug("Bokeh: BokehJS is being loaded, scheduling callback at", now());
      return null;
    }
    if (js_urls.length === 0 && js_modules.length === 0 && Object.keys(js_exports).length === 0) {
      run_callbacks();
      return null;
    }
    if (!reloading) {
      console.debug("Bokeh: BokehJS not loaded, scheduling load and callback at", now());
    }

    function on_load() {
      root._bokeh_is_loading--;
      if (root._bokeh_is_loading === 0) {
        console.debug("Bokeh: all BokehJS libraries/stylesheets loaded");
        run_callbacks()
      }
    }
    window._bokeh_on_load = on_load

    function on_error() {
      console.error("failed to load " + url);
    }

    var skip = [];
    if (window.requirejs) {
      window.requirejs.config({'packages': {}, 'paths': {'perspective': 'https://cdn.jsdelivr.net/npm/@finos/perspective@2.9.0/dist/cdn/perspective', 'perspective-worker': 'https://cdn.jsdelivr.net/npm/@finos/perspective@2.9.0/dist/cdn/perspective.worker', 'perspective-viewer': 'https://cdn.jsdelivr.net/npm/@finos/perspective-viewer@2.9.0/dist/cdn/perspective-viewer', 'perspective-viewer-datagrid': 'https://cdn.jsdelivr.net/npm/@finos/perspective-viewer-datagrid@2.9.0/dist/cdn/perspective-viewer-datagrid', 'perspective-viewer-d3fc': 'https://cdn.jsdelivr.net/npm/@finos/perspective-viewer-d3fc@2.9.0/dist/cdn/perspective-viewer-d3fc'}, 'shim': {}});
      require(["perspective"], function(perspective) {
    window.perspective = perspective
    on_load()
      })
      require(["perspective-worker"], function() {
    on_load()
      })
      require(["perspective-viewer"], function(PerspectiveViewer) {
    window.PerspectiveViewer = PerspectiveViewer
    on_load()
      })
      require(["perspective-viewer-datagrid"], function(PerspectiveViewerDatagrid) {
    window.PerspectiveViewerDatagrid = PerspectiveViewerDatagrid
    on_load()
      })
      require(["perspective-viewer-d3fc"], function(PerspectiveViewerD3fc) {
    window.PerspectiveViewerD3fc = PerspectiveViewerD3fc
    on_load()
      })
      root._bokeh_is_loading = css_urls.length + 5;
    } else {
      root._bokeh_is_loading = css_urls.length + js_urls.length + js_modules.length + Object.keys(js_exports).length;
    }

    var existing_stylesheets = []
    var links = document.getElementsByTagName('link')
    for (var i = 0; i < links.length; i++) {
      var link = links[i]
      if (link.href != null) {
    existing_stylesheets.push(link.href)
      }
    }
    for (var i = 0; i < css_urls.length; i++) {
      var url = css_urls[i];
      if (existing_stylesheets.indexOf(url) !== -1) {
    on_load()
    continue;
      }
      const element = document.createElement("link");
      element.onload = on_load;
      element.onerror = on_error;
      element.rel = "stylesheet";
      element.type = "text/css";
      element.href = url;
      console.debug("Bokeh: injecting link tag for BokehJS stylesheet: ", url);
      document.body.appendChild(element);
    }    if (((window.customElements.get('perspective-viewer') !== undefined) && (!(window.customElements.get('perspective-viewer') instanceof HTMLElement))) || window.requirejs) {
      var urls = ['https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective@2.9.0/dist/cdn/perspective.js', 'https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective-viewer@2.9.0/dist/cdn/perspective-viewer.js', 'https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective-viewer-datagrid@2.9.0/dist/cdn/perspective-viewer-datagrid.js', 'https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective-viewer-d3fc@2.9.0/dist/cdn/perspective-viewer-d3fc.js'];
      for (var i = 0; i < urls.length; i++) {
        skip.push(urls[i])
      }
    }    var existing_scripts = []
    var scripts = document.getElementsByTagName('script')
    for (var i = 0; i < scripts.length; i++) {
      var script = scripts[i]
      if (script.src != null) {
    existing_scripts.push(script.src)
      }
    }
    for (var i = 0; i < js_urls.length; i++) {
      var url = js_urls[i];
      if (skip.indexOf(url) !== -1 || existing_scripts.indexOf(url) !== -1) {
    if (!window.requirejs) {
      on_load();
    }
    continue;
      }
      var element = document.createElement('script');
      element.onload = on_load;
      element.onerror = on_error;
      element.async = false;
      element.src = url;
      console.debug("Bokeh: injecting script tag for BokehJS library: ", url);
      document.head.appendChild(element);
    }
    for (var i = 0; i < js_modules.length; i++) {
      var url = js_modules[i];
      if (skip.indexOf(url) !== -1 || existing_scripts.indexOf(url) !== -1) {
    if (!window.requirejs) {
      on_load();
    }
    continue;
      }
      var element = document.createElement('script');
      element.onload = on_load;
      element.onerror = on_error;
      element.async = false;
      element.src = url;
      element.type = "module";
      console.debug("Bokeh: injecting script tag for BokehJS library: ", url);
      document.head.appendChild(element);
    }
    for (const name in js_exports) {
      var url = js_exports[name];
      if (skip.indexOf(url) >= 0 || root[name] != null) {
    if (!window.requirejs) {
      on_load();
    }
    continue;
      }
      var element = document.createElement('script');
      element.onerror = on_error;
      element.async = false;
      element.type = "module";
      console.debug("Bokeh: injecting script tag for BokehJS library: ", url);
      element.textContent = `
      import ${name} from "${url}"
      window.${name} = ${name}
      window._bokeh_on_load()
      `
      document.head.appendChild(element);
    }
    if (!js_urls.length && !js_modules.length) {
      on_load()
    }
  };

  function inject_raw_css(css) {
    const element = document.createElement("style");
    element.appendChild(document.createTextNode(css));
    document.body.appendChild(element);
  }

  var js_urls = ["https://cdn.bokeh.org/bokeh/release/bokeh-3.4.3.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-gl-3.4.3.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-widgets-3.4.3.min.js", "https://cdn.bokeh.org/bokeh/release/bokeh-tables-3.4.3.min.js", "https://cdn.holoviz.org/panel/1.4.5/dist/panel.min.js"];
  var js_modules = ["https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective@2.9.0/dist/cdn/perspective.js", "https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective-viewer@2.9.0/dist/cdn/perspective-viewer.js", "https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective-viewer-datagrid@2.9.0/dist/cdn/perspective-viewer-datagrid.js", "https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective-viewer-d3fc@2.9.0/dist/cdn/perspective-viewer-d3fc.js"];
  var js_exports = {"perspective": "https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective@2.9.0/dist/cdn/perspective.js"};
  var css_urls = ["https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective-viewer@2.9.0/dist/css/fonts.css?v=1.4.5", "https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective-viewer@2.9.0/dist/css/themes.css?v=1.4.5", "https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective-viewer@2.9.0/dist/css/variables.css?v=1.4.5", "https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective-viewer@2.9.0/dist/css/monokai.css?v=1.4.5", "https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective-viewer@2.9.0/dist/css/solarized.css?v=1.4.5", "https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective-viewer@2.9.0/dist/css/solarized-dark.css?v=1.4.5", "https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective-viewer@2.9.0/dist/css/vaporwave.css?v=1.4.5", "https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective-viewer@2.9.0/dist/css/dracula.css?v=1.4.5", "https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective-viewer@2.9.0/dist/css/pro.css?v=1.4.5", "https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective-viewer@2.9.0/dist/css/pro-dark.css?v=1.4.5", "https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective-viewer@2.9.0/dist/css/gruvbox.css?v=1.4.5", "https://cdn.holoviz.org/panel/1.4.5/dist/bundled/perspective/@finos/perspective-viewer@2.9.0/dist/css/gruvbox-dark.css?v=1.4.5"];
  var inline_js = [    function(Bokeh) {
      Bokeh.set_log_level("info");
    },
function(Bokeh) {} // ensure no trailing comma for IE
  ];

  function run_inline_js() {
    if ((root.Bokeh !== undefined) || (force === true)) {
      for (var i = 0; i < inline_js.length; i++) {
    try {
          inline_js[i].call(root, root.Bokeh);
    } catch(e) {
      if (!reloading) {
        throw e;
      }
    }
      }
      // Cache old bokeh versions
      if (Bokeh != undefined && !reloading) {
    var NewBokeh = root.Bokeh;
    if (Bokeh.versions === undefined) {
      Bokeh.versions = new Map();
    }
    if (NewBokeh.version !== Bokeh.version) {
      Bokeh.versions.set(NewBokeh.version, NewBokeh)
    }
    root.Bokeh = Bokeh;
      }} else if (Date.now() < root._bokeh_timeout) {
      setTimeout(run_inline_js, 100);
    } else if (!root._bokeh_failed_load) {
      console.log("Bokeh: BokehJS failed to load within specified timeout.");
      root._bokeh_failed_load = true;
    }
    root._bokeh_is_initializing = false
  }

  function load_or_wait() {
    // Implement a backoff loop that tries to ensure we do not load multiple
    // versions of Bokeh and its dependencies at the same time.
    // In recent versions we use the root._bokeh_is_initializing flag
    // to determine whether there is an ongoing attempt to initialize
    // bokeh, however for backward compatibility we also try to ensure
    // that we do not start loading a newer (Panel>=1.0 and Bokeh>3) version
    // before older versions are fully initialized.
    if (root._bokeh_is_initializing && Date.now() > root._bokeh_timeout) {
      root._bokeh_is_initializing = false;
      root._bokeh_onload_callbacks = undefined;
      console.log("Bokeh: BokehJS was loaded multiple times but one version failed to initialize.");
      load_or_wait();
    } else if (root._bokeh_is_initializing || (typeof root._bokeh_is_initializing === "undefined" && root._bokeh_onload_callbacks !== undefined)) {
      setTimeout(load_or_wait, 100);
    } else {
      root._bokeh_is_initializing = true
      root._bokeh_onload_callbacks = []
      var bokeh_loaded = Bokeh != null && (Bokeh.version === py_version || (Bokeh.versions !== undefined && Bokeh.versions.has(py_version)));
      if (!reloading && !bokeh_loaded) {
    root.Bokeh = undefined;
      }
      load_libs(css_urls, js_urls, js_modules, js_exports, function() {
    console.debug("Bokeh: BokehJS plotting callback run at", now());
    run_inline_js();
      });
    }
  }
  // Give older versions of the autoload script a head-start to ensure
  // they initialize before we start loading newer version.
  setTimeout(load_or_wait, 100)
}(window));
</script>
</div>
<div class="cell-output cell-output-display">
<script type="application/javascript">

if ((window.PyViz === undefined) || (window.PyViz instanceof HTMLElement)) {
  window.PyViz = {comms: {}, comm_status:{}, kernels:{}, receivers: {}, plot_index: []}
}


    function JupyterCommManager() {
    }

    JupyterCommManager.prototype.register_target = function(plot_id, comm_id, msg_handler) {
      if (window.comm_manager || ((window.Jupyter !== undefined) && (Jupyter.notebook.kernel != null))) {
        var comm_manager = window.comm_manager || Jupyter.notebook.kernel.comm_manager;
        comm_manager.register_target(comm_id, function(comm) {
          comm.on_msg(msg_handler);
        });
      } else if ((plot_id in window.PyViz.kernels) && (window.PyViz.kernels[plot_id])) {
        window.PyViz.kernels[plot_id].registerCommTarget(comm_id, function(comm) {
          comm.onMsg = msg_handler;
        });
      } else if (typeof google != 'undefined' && google.colab.kernel != null) {
        google.colab.kernel.comms.registerTarget(comm_id, (comm) => {
          var messages = comm.messages[Symbol.asyncIterator]();
          function processIteratorResult(result) {
            var message = result.value;
            console.log(message)
            var content = {data: message.data, comm_id};
            var buffers = []
            for (var buffer of message.buffers || []) {
              buffers.push(new DataView(buffer))
            }
            var metadata = message.metadata || {};
            var msg = {content, buffers, metadata}
            msg_handler(msg);
            return messages.next().then(processIteratorResult);
          }
          return messages.next().then(processIteratorResult);
        })
      }
    }

    JupyterCommManager.prototype.get_client_comm = function(plot_id, comm_id, msg_handler) {
      if (comm_id in window.PyViz.comms) {
        return window.PyViz.comms[comm_id];
      } else if (window.comm_manager || ((window.Jupyter !== undefined) && (Jupyter.notebook.kernel != null))) {
        var comm_manager = window.comm_manager || Jupyter.notebook.kernel.comm_manager;
        var comm = comm_manager.new_comm(comm_id, {}, {}, {}, comm_id);
        if (msg_handler) {
          comm.on_msg(msg_handler);
        }
      } else if ((plot_id in window.PyViz.kernels) && (window.PyViz.kernels[plot_id])) {
        var comm = window.PyViz.kernels[plot_id].connectToComm(comm_id);
        comm.open();
        if (msg_handler) {
          comm.onMsg = msg_handler;
        }
      } else if (typeof google != 'undefined' && google.colab.kernel != null) {
        var comm_promise = google.colab.kernel.comms.open(comm_id)
        comm_promise.then((comm) => {
          window.PyViz.comms[comm_id] = comm;
          if (msg_handler) {
            var messages = comm.messages[Symbol.asyncIterator]();
            function processIteratorResult(result) {
              var message = result.value;
              var content = {data: message.data};
              var metadata = message.metadata || {comm_id};
              var msg = {content, metadata}
              msg_handler(msg);
              return messages.next().then(processIteratorResult);
            }
            return messages.next().then(processIteratorResult);
          }
        }) 
        var sendClosure = (data, metadata, buffers, disposeOnDone) => {
          return comm_promise.then((comm) => {
            comm.send(data, metadata, buffers, disposeOnDone);
          });
        };
        var comm = {
          send: sendClosure
        };
      }
      window.PyViz.comms[comm_id] = comm;
      return comm;
    }
    window.PyViz.comm_manager = new JupyterCommManager();
    


var JS_MIME_TYPE = 'application/javascript';
var HTML_MIME_TYPE = 'text/html';
var EXEC_MIME_TYPE = 'application/vnd.holoviews_exec.v0+json';
var CLASS_NAME = 'output';

/**
 * Render data to the DOM node
 */
function render(props, node) {
  var div = document.createElement("div");
  var script = document.createElement("script");
  node.appendChild(div);
  node.appendChild(script);
}

/**
 * Handle when a new output is added
 */
function handle_add_output(event, handle) {
  var output_area = handle.output_area;
  var output = handle.output;
  if ((output.data == undefined) || (!output.data.hasOwnProperty(EXEC_MIME_TYPE))) {
    return
  }
  var id = output.metadata[EXEC_MIME_TYPE]["id"];
  var toinsert = output_area.element.find("." + CLASS_NAME.split(' ')[0]);
  if (id !== undefined) {
    var nchildren = toinsert.length;
    var html_node = toinsert[nchildren-1].children[0];
    html_node.innerHTML = output.data[HTML_MIME_TYPE];
    var scripts = [];
    var nodelist = html_node.querySelectorAll("script");
    for (var i in nodelist) {
      if (nodelist.hasOwnProperty(i)) {
        scripts.push(nodelist[i])
      }
    }

    scripts.forEach( function (oldScript) {
      var newScript = document.createElement("script");
      var attrs = [];
      var nodemap = oldScript.attributes;
      for (var j in nodemap) {
        if (nodemap.hasOwnProperty(j)) {
          attrs.push(nodemap[j])
        }
      }
      attrs.forEach(function(attr) { newScript.setAttribute(attr.name, attr.value) });
      newScript.appendChild(document.createTextNode(oldScript.innerHTML));
      oldScript.parentNode.replaceChild(newScript, oldScript);
    });
    if (JS_MIME_TYPE in output.data) {
      toinsert[nchildren-1].children[1].textContent = output.data[JS_MIME_TYPE];
    }
    output_area._hv_plot_id = id;
    if ((window.Bokeh !== undefined) && (id in Bokeh.index)) {
      window.PyViz.plot_index[id] = Bokeh.index[id];
    } else {
      window.PyViz.plot_index[id] = null;
    }
  } else if (output.metadata[EXEC_MIME_TYPE]["server_id"] !== undefined) {
    var bk_div = document.createElement("div");
    bk_div.innerHTML = output.data[HTML_MIME_TYPE];
    var script_attrs = bk_div.children[0].attributes;
    for (var i = 0; i < script_attrs.length; i++) {
      toinsert[toinsert.length - 1].childNodes[1].setAttribute(script_attrs[i].name, script_attrs[i].value);
    }
    // store reference to server id on output_area
    output_area._bokeh_server_id = output.metadata[EXEC_MIME_TYPE]["server_id"];
  }
}

/**
 * Handle when an output is cleared or removed
 */
function handle_clear_output(event, handle) {
  var id = handle.cell.output_area._hv_plot_id;
  var server_id = handle.cell.output_area._bokeh_server_id;
  if (((id === undefined) || !(id in PyViz.plot_index)) && (server_id !== undefined)) { return; }
  var comm = window.PyViz.comm_manager.get_client_comm("hv-extension-comm", "hv-extension-comm", function () {});
  if (server_id !== null) {
    comm.send({event_type: 'server_delete', 'id': server_id});
    return;
  } else if (comm !== null) {
    comm.send({event_type: 'delete', 'id': id});
  }
  delete PyViz.plot_index[id];
  if ((window.Bokeh !== undefined) & (id in window.Bokeh.index)) {
    var doc = window.Bokeh.index[id].model.document
    doc.clear();
    const i = window.Bokeh.documents.indexOf(doc);
    if (i > -1) {
      window.Bokeh.documents.splice(i, 1);
    }
  }
}

/**
 * Handle kernel restart event
 */
function handle_kernel_cleanup(event, handle) {
  delete PyViz.comms["hv-extension-comm"];
  window.PyViz.plot_index = {}
}

/**
 * Handle update_display_data messages
 */
function handle_update_output(event, handle) {
  handle_clear_output(event, {cell: {output_area: handle.output_area}})
  handle_add_output(event, handle)
}

function register_renderer(events, OutputArea) {
  function append_mime(data, metadata, element) {
    // create a DOM node to render to
    var toinsert = this.create_output_subarea(
    metadata,
    CLASS_NAME,
    EXEC_MIME_TYPE
    );
    this.keyboard_manager.register_events(toinsert);
    // Render to node
    var props = {data: data, metadata: metadata[EXEC_MIME_TYPE]};
    render(props, toinsert[0]);
    element.append(toinsert);
    return toinsert
  }

  events.on('output_added.OutputArea', handle_add_output);
  events.on('output_updated.OutputArea', handle_update_output);
  events.on('clear_output.CodeCell', handle_clear_output);
  events.on('delete.Cell', handle_clear_output);
  events.on('kernel_ready.Kernel', handle_kernel_cleanup);

  OutputArea.prototype.register_mime_type(EXEC_MIME_TYPE, append_mime, {
    safe: true,
    index: 0
  });
}

if (window.Jupyter !== undefined) {
  try {
    var events = require('base/js/events');
    var OutputArea = require('notebook/js/outputarea').OutputArea;
    if (OutputArea.prototype.mime_types().indexOf(EXEC_MIME_TYPE) == -1) {
      register_renderer(events, OutputArea);
    }
  } catch(err) {
  }
}

</script>
</div>
<div class="cell-output cell-output-display">
<style>*[data-root-id],
*[data-root-id] > * {
  box-sizing: border-box;
  font-family: var(--jp-ui-font-family);
  font-size: var(--jp-ui-font-size1);
  color: var(--vscode-editor-foreground, var(--jp-ui-font-color1));
}

/* Override VSCode background color */
.cell-output-ipywidget-background:has(
    > .cell-output-ipywidget-background > .lm-Widget > *[data-root-id]
  ),
.cell-output-ipywidget-background:has(> .lm-Widget > *[data-root-id]) {
  background-color: transparent !important;
}
</style>
</div>
<div class="cell-output cell-output-display">
<div id="8f3a7935-6b92-47f4-b575-1e13a9f3f197">
  <div id="ea3add29-7c23-4edf-84a9-c3a3b565f3a1" data-root-id="8f3a7935-6b92-47f4-b575-1e13a9f3f197" style="display: contents;"></div>
</div>
<script type="application/javascript">(function(root) {
  var docs_json = {"b73cadd7-1d7c-42fd-a928-bacdb1cc0cd5":{"version":"3.4.3","title":"Bokeh Application","roots":[{"type":"object","name":"panel.models.browser.BrowserInfo","id":"8f3a7935-6b92-47f4-b575-1e13a9f3f197"},{"type":"object","name":"panel.models.comm_manager.CommManager","id":"f362d447-7003-427b-9dcd-1106eb9d1352","attributes":{"plot_id":"8f3a7935-6b92-47f4-b575-1e13a9f3f197","comm_id":"85a36a267b4f4b498a07b4e175aeab5d","client_comm_id":"fa3b73ed2e2542819c2489d43234f79f"}}],"defs":[{"type":"model","name":"ReactiveHTML1"},{"type":"model","name":"FlexBox1","properties":[{"name":"align_content","kind":"Any","default":"flex-start"},{"name":"align_items","kind":"Any","default":"flex-start"},{"name":"flex_direction","kind":"Any","default":"row"},{"name":"flex_wrap","kind":"Any","default":"wrap"},{"name":"gap","kind":"Any","default":""},{"name":"justify_content","kind":"Any","default":"flex-start"}]},{"type":"model","name":"FloatPanel1","properties":[{"name":"config","kind":"Any","default":{"type":"map"}},{"name":"contained","kind":"Any","default":true},{"name":"position","kind":"Any","default":"right-top"},{"name":"offsetx","kind":"Any","default":null},{"name":"offsety","kind":"Any","default":null},{"name":"theme","kind":"Any","default":"primary"},{"name":"status","kind":"Any","default":"normalized"}]},{"type":"model","name":"GridStack1","properties":[{"name":"mode","kind":"Any","default":"warn"},{"name":"ncols","kind":"Any","default":null},{"name":"nrows","kind":"Any","default":null},{"name":"allow_resize","kind":"Any","default":true},{"name":"allow_drag","kind":"Any","default":true},{"name":"state","kind":"Any","default":[]}]},{"type":"model","name":"drag1","properties":[{"name":"slider_width","kind":"Any","default":5},{"name":"slider_color","kind":"Any","default":"black"},{"name":"value","kind":"Any","default":50}]},{"type":"model","name":"click1","properties":[{"name":"terminal_output","kind":"Any","default":""},{"name":"debug_name","kind":"Any","default":""},{"name":"clears","kind":"Any","default":0}]},{"type":"model","name":"FastWrapper1","properties":[{"name":"object","kind":"Any","default":null},{"name":"style","kind":"Any","default":null}]},{"type":"model","name":"NotificationAreaBase1","properties":[{"name":"js_events","kind":"Any","default":{"type":"map"}},{"name":"position","kind":"Any","default":"bottom-right"},{"name":"_clear","kind":"Any","default":0}]},{"type":"model","name":"NotificationArea1","properties":[{"name":"js_events","kind":"Any","default":{"type":"map"}},{"name":"notifications","kind":"Any","default":[]},{"name":"position","kind":"Any","default":"bottom-right"},{"name":"_clear","kind":"Any","default":0},{"name":"types","kind":"Any","default":[{"type":"map","entries":[["type","warning"],["background","#ffc107"],["icon",{"type":"map","entries":[["className","fas fa-exclamation-triangle"],["tagName","i"],["color","white"]]}]]},{"type":"map","entries":[["type","info"],["background","#007bff"],["icon",{"type":"map","entries":[["className","fas fa-info-circle"],["tagName","i"],["color","white"]]}]]}]}]},{"type":"model","name":"Notification","properties":[{"name":"background","kind":"Any","default":null},{"name":"duration","kind":"Any","default":3000},{"name":"icon","kind":"Any","default":null},{"name":"message","kind":"Any","default":""},{"name":"notification_type","kind":"Any","default":null},{"name":"_destroyed","kind":"Any","default":false}]},{"type":"model","name":"TemplateActions1","properties":[{"name":"open_modal","kind":"Any","default":0},{"name":"close_modal","kind":"Any","default":0}]},{"type":"model","name":"BootstrapTemplateActions1","properties":[{"name":"open_modal","kind":"Any","default":0},{"name":"close_modal","kind":"Any","default":0}]},{"type":"model","name":"TemplateEditor1","properties":[{"name":"layout","kind":"Any","default":[]}]},{"type":"model","name":"MaterialTemplateActions1","properties":[{"name":"open_modal","kind":"Any","default":0},{"name":"close_modal","kind":"Any","default":0}]},{"type":"model","name":"copy_to_clipboard1","properties":[{"name":"fill","kind":"Any","default":"none"},{"name":"value","kind":"Any","default":null}]}]}};
  var render_items = [{"docid":"b73cadd7-1d7c-42fd-a928-bacdb1cc0cd5","roots":{"8f3a7935-6b92-47f4-b575-1e13a9f3f197":"ea3add29-7c23-4edf-84a9-c3a3b565f3a1"},"root_ids":["8f3a7935-6b92-47f4-b575-1e13a9f3f197"]}];
  var docs = Object.values(docs_json)
  if (!docs) {
    return
  }
  const py_version = docs[0].version.replace('rc', '-rc.').replace('.dev', '-dev.')
  async function embed_document(root) {
    var Bokeh = get_bokeh(root)
    await Bokeh.embed.embed_items_notebook(docs_json, render_items);
    for (const render_item of render_items) {
      for (const root_id of render_item.root_ids) {
    const id_el = document.getElementById(root_id)
    if (id_el.children.length && id_el.children[0].hasAttribute('data-root-id')) {
      const root_el = id_el.children[0]
      root_el.id = root_el.id + '-rendered'
      for (const child of root_el.children) {
            // Ensure JupyterLab does not capture keyboard shortcuts
            // see: https://jupyterlab.readthedocs.io/en/4.1.x/extension/notebook.html#keyboard-interaction-model
        child.setAttribute('data-lm-suppress-shortcuts', 'true')
      }
    }
      }
    }
  }
  function get_bokeh(root) {
    if (root.Bokeh === undefined) {
      return null
    } else if (root.Bokeh.version !== py_version) {
      if (root.Bokeh.versions === undefined || !root.Bokeh.versions.has(py_version)) {
    return null
      }
      return root.Bokeh.versions.get(py_version);
    } else if (root.Bokeh.version === py_version) {
      return root.Bokeh
    }
    return null
  }
  function is_loaded(root) {
    var Bokeh = get_bokeh(root)
    return (Bokeh != null && Bokeh.Panel !== undefined && ( root.customElements.get('perspective-viewer') !== undefined) && ( root.customElements.get('perspective-viewer') !== undefined))
  }
  if (is_loaded(root)) {
    embed_document(root);
  } else {
    var attempts = 0;
    var timer = setInterval(function(root) {
      if (is_loaded(root)) {
        clearInterval(timer);
        embed_document(root);
      } else if (document.readyState == "complete") {
        attempts++;
        if (attempts > 200) {
          clearInterval(timer);
      var Bokeh = get_bokeh(root)
      if (Bokeh == null || Bokeh.Panel == null) {
            console.warn("Panel: ERROR: Unable to run Panel code because Bokeh or Panel library is missing");
      } else {
        console.warn("Panel: WARNING: Attempting to render but not all required libraries could be resolved.")
        embed_document(root)
      }
        }
      }
    }, 25, root)
  }
})(window);</script>
</div>
</div>
</section>
<section id="challenges-with-gemini-model" class="level4">
<h4 class="anchored" data-anchor-id="challenges-with-gemini-model">Challenges with Gemini model</h4>
<ol type="1">
<li>Making mistakes in mathematical calculations. When we ask it to re-check the calculation, it may give you a different total than the one it said earlier. –&gt; What helped: While calculating the total bill of the customer, calculate the sum of price of all items ordered by the customer.</li>
<li>Compared to openai api, I had to add more instructions for the chatbot to make it perform satisfactorily. Eg:
<ol type="1">
<li>While calculating the total bill of the customer, calculate the sum of price of all items ordered by the customer.</li>
<li>Please do not suggest dishes not in the menu mentioned below.</li>
</ol></li>
<li>The instructions specify that the chatbot should always ask for toppings after a pizza order is placed. However, chatbot has missed it in some instances.</li>
</ol>
</section>
<section id="task-4-serving-the-notebook" class="level4">
<h4 class="anchored" data-anchor-id="task-4-serving-the-notebook">Task 4: Serving the Notebook</h4>
<p>We’ll organize our components in a nicely styled template (MaterialTemplate) and mark it .servable() to add it to our served app</p>
<div id="cell-17" class="cell" data-execution_count="7">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">pn.template.MaterialTemplate(</span>
<span id="cb6-2">    site<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Panel"</span>,</span>
<span id="cb6-3">    title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Order bot of Pizza Paradise!"</span>,</span>
<span id="cb6-4">    main<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[chat_bot],</span>
<span id="cb6-5">).servable()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span> <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># The ; is needed in the notebook to not display the template. Its not needed in a script</span></span></code></pre></div>
</div>
<p><strong>Deploy the app locally:</strong></p>
<p>Run in terminal:</p>
<p><code>panel serve v2_gemini-pizza-chatbot_chatInterface.ipynb --autoreload</code></p>
</section>
<section id="deploy-in-cloud" class="level4">
<h4 class="anchored" data-anchor-id="deploy-in-cloud">Deploy in Cloud:</h4>
<ol type="1">
<li>How can I deploy my app and embed it in my website? : DONE
<ol type="1">
<li>Use: https://docs.cloud.ploomber.io/en/latest/apps/panel.html</li>
</ol></li>
</ol>
</section>
<section id="appendix-system-instructions-to-the-model" class="level4">
<h4 class="anchored" data-anchor-id="appendix-system-instructions-to-the-model">Appendix: System instructions to the model</h4>
<p>You are OrderBot, an automated service to collect orders for a pizza restaurant. You first greet the customer, then collects the order, and then asks if it’s a pickup or delivery. You wait to collect the entire order, then summarize it and check for a final time if the customer wants to add anything else. If it’s a delivery, you ask for an address and contact number. When you give the final order summary, calculate the total price incurred by the customer based on the price tag in the menu. While calculating the total bill of the customer, calculate the sum of price of all items ordered by the customer. If the customer asks for any clarifications on the bill total, re-do the calculation and say the result. Finally you collect the payment. Make sure to clarify all options, extras and sizes to uniquely identify the item from the menu. If they choose a pizza, make sure to ask about Toppings. Please do not suggest dishes not in the menu mentioned below. You respond in a short, very conversational friendly style. The menu includes pepperoni pizza 12.95, 10.00, 7.00 cheese pizza 10.95, 9.25, 6.50 eggplant pizza 11.95, 9.75, 6.75 fries 4.50, 3.50 greek salad 7.25 Toppings: extra cheese 2.00, mushrooms 1.50 sausage 3.00 canadian bacon 3.50 AI sauce 1.50 peppers 1.00 Drinks: coke 3.00, 2.00, 1.00 sprite 3.00, 2.00, 1.00 bottled water 5.00</p>


</section>
</section>

 ]]></description>
  <guid>https://www.aksharasoman.github.io/posts/002_chatbot/v2_gemini-pizza-chatbot_chatInterface.html</guid>
  <pubDate>Fri, 16 Aug 2024 08:38:08 GMT</pubDate>
  <media:content url="https://www.aksharasoman.github.io/posts/002_chatbot/supportbot.png" medium="image" type="image/png" height="180" width="144"/>
</item>
</channel>
</rss>
