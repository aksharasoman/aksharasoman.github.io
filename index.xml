<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>akshara soman</title>
<link>https://www.aksharasoman.github.io/</link>
<atom:link href="https://www.aksharasoman.github.io/index.xml" rel="self" type="application/rss+xml"/>
<description>A machine learning blog</description>
<generator>quarto-1.5.53</generator>
<lastBuildDate>Thu, 11 Jul 2024 18:30:00 GMT</lastBuildDate>
<item>
  <title>Generate Handwritten Digits Using GAN</title>
  <dc:creator>Akshara Soman</dc:creator>
  <link>https://www.aksharasoman.github.io/posts/gan_project/</link>
  <description><![CDATA[ 





<section id="objective-of-the-project" class="level3">
<h3 class="anchored" data-anchor-id="objective-of-the-project">Objective of the Project</h3>
<p>Build a DC-GAN (Deep Convolutional Generative Adversarial Network) to generate images of handwritten digits.</p>
</section>
<section id="important-details" class="level3">
<h3 class="anchored" data-anchor-id="important-details">Important Details</h3>
<ol type="1">
<li>Dataset: MNIST handwritten digits dataset (grayscale)</li>
<li>Model: Generative Adversarial Network (GAN)</li>
<li>Code available at: <a href="https://github.com/aksharasoman/dcgan" class="uri">https://github.com/aksharasoman/dcgan</a></li>
<li>It can be built in google colab: <a href="https://github.com/aksharasoman/dcgan/blob/f245b0250f79fcba497506f58dd080faeceade71/GAN_handwrittenDigits.ipynb">python-notebook</a></li>
</ol>
</section>
<section id="overview" class="level3">
<h3 class="anchored" data-anchor-id="overview">Overview</h3>
<p>A Generative Adversarial Network (GAN) model has two major components: a generator and a discriminator. Figure&nbsp;1 gives outline of a GAN model.</p>
<div id="fig-gan-arch" class="quarto-float quarto-figure quarto-figure-center anchored">
<figure class="quarto-float quarto-float-fig figure">
<div aria-describedby="fig-gan-arch-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
<img src="https://www.aksharasoman.github.io/posts/gan_project/gan_arch.png" class="img-fluid figure-img" style="width:60.0%">
</div>
<figcaption class="quarto-float-caption-bottom quarto-float-caption quarto-float-fig" id="fig-gan-arch-caption-0ceaefa1-69ba-4598-a22c-09a6ac19f8ca">
Figure&nbsp;1: Basic GAN architecture
</figcaption>
</figure>
</div>
<p>A generator creates fake samples that mimic the real samples provided to the discriminator network. The discriminator is a binary classifier that evaluates these inputs, determining whether each one is real or fake. The generator’s objective is to produce fake samples that are so similar to real ones that the discriminator incorrectly identifies them as genuine.</p>
<p>GAN loss function consists of two parts: generator loss and discriminator loss.</p>
<div class="callout callout-style-simple callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
GAN Training Strategy
</div>
</div>
<div class="callout-body-container callout-body">
<p>During generator training, the discriminator’s weights are kept constant and are not updated, and vice versa.</p>
</div>
</div>
</section>
<section id="implementation" class="level3">
<h3 class="anchored" data-anchor-id="implementation">Implementation</h3>
<p>This project can be divided into 7 tasks.</p>
<ol type="1">
<li>Configurations</li>
<li>Load dataset</li>
<li>Load dataset into batches</li>
<li>Create discriminator network</li>
<li>Create generator network</li>
<li>Create loss function &amp; optimizer</li>
<li>Training Loop</li>
</ol>
<p>For ease of understanding, you may refer to the <a href="https://github.com/aksharasoman/dcgan/blob/f245b0250f79fcba497506f58dd080faeceade71/GAN_handwrittenDigits.ipynb">iPython notebook</a>, where each task is coded in separate sections.</p>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-2-contents" aria-controls="callout-2" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Expected learnings
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-2" class="callout-2-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li>What is Generative Adversarial Network</li>
<li><a href="../../posts/gan_project/ApplicationsGANs.html">Applications of GANs</a>(Current state-of-art performers for these applications)</li>
<li>What is Generator?</li>
<li>What is discriminator?</li>
<li>Understanding architecture</li>
<li>Loss functions</li>
<li>How to generate a fake image using GAN?</li>
<li>How to download and transform data in Pytorch?</li>
<li>How to calculate input image size for each layer?</li>
<li>How to build a GAN model from scratch in pytorch?</li>
<li>How to train a Generative Adversarial Network?
<ol type="1">
<li>How to train the model on colab with GPU?</li>
<li>How to train the model in a remote cluster environment?</li>
</ol></li>
<li>Challenges in GAN</li>
</ol>
</div>
</div>
</div>
</section>
<section id="results-snapshot" class="level3">
<h3 class="anchored" data-anchor-id="results-snapshot">Results Snapshot</h3>
<div>

</div>
<div class="quarto-layout-panel" data-layout-ncol="2">
<div class="quarto-layout-row">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="generated_digits_epoch1.png" class="lightbox" data-gallery="quarto-lightbox-gallery-1" title="Digits generated after the first epoch"><img src="https://www.aksharasoman.github.io/posts/gan_project/generated_digits_epoch1.png" class="img-fluid quarto-figure quarto-figure-left figure-img" alt="Digits generated after the first epoch"></a></p>
</figure>
</div>
<figcaption>Digits generated after the first epoch</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: flex-start;">
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><a href="generated_digits_epoch15.png" class="lightbox" data-gallery="quarto-lightbox-gallery-2" title="Digits generated after 15 epochs"><img src="https://www.aksharasoman.github.io/posts/gan_project/generated_digits_epoch15.png" class="img-fluid quarto-figure quarto-figure-left figure-img" alt="Digits generated after 15 epochs"></a></p>
</figure>
</div>
<figcaption>Digits generated after 15 epochs</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
<section id="references" class="level3">
<h3 class="anchored" data-anchor-id="references">References</h3>
<ol type="1">
<li>Coursera Guided Project: “<a href="https://www.coursera.org/projects/deep-learning-with-pytorch-generative-adversarial-network#details">Deep Learning with PyTorch : Generative Adversarial Network</a>”</li>
</ol>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-3-contents" aria-controls="callout-3" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Further Readings
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-3" class="callout-3-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li>A good intro blog with details of related problems: <a href="https://pyimagesearch.com/2021/09/13/intro-to-generative-adversarial-networks-gans/">link</a></li>
<li></li>
</ol>
</div>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center" data-bs-toggle="collapse" data-bs-target=".callout-4-contents" aria-controls="callout-4" aria-expanded="false" aria-label="Toggle callout">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Possible Extensions
</div>
<div class="callout-btn-toggle d-inline-block border-0 py-1 ps-1 pe-0 float-end"><i class="callout-toggle"></i></div>
</div>
<div id="callout-4" class="callout-4-contents callout-collapse collapse">
<div class="callout-body-container callout-body">
<ol type="1">
<li>Generate fashion cloth images (Dataset: FashionMNIST - grayscale)
<ol type="1">
<li>Extend it to color images (<a href="https://pyimagesearch.com/2021/12/13/gan-training-challenges-dcgan-for-color-images/">ref</a>)</li>
</ol></li>
<li>Text to image</li>
</ol>
</div>
</div>
</div>


</section>

 ]]></description>
  <category>project</category>
  <category>gen-ai</category>
  <category>GAN</category>
  <category>pytorch</category>
  <guid>https://www.aksharasoman.github.io/posts/gan_project/</guid>
  <pubDate>Thu, 11 Jul 2024 18:30:00 GMT</pubDate>
  <media:content url="https://www.aksharasoman.github.io/posts/gan_project/gan_arch.png" medium="image" type="image/png" height="83" width="144"/>
</item>
</channel>
</rss>
